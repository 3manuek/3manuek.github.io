<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Databases, posts and service developing.</description>
    <link>http://www.3manuek.com/</link>
    <atom:link href="http://www.3manuek.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 24 Apr 2016 18:29:38 -0300</pubDate>
    <lastBuildDate>Sun, 24 Apr 2016 18:29:38 -0300</lastBuildDate>
    <generator>Jekyll v3.0.4</generator>
    
      <item>
        <title>MySQL 5.7 InnoDB&#39;s Full Text Search overview.</title>
        <description>&lt;p&gt;Main application:
&lt;a href=&quot;https://3manuek.shinyapps.io/FTS_Innodb/&quot;&gt;InnoDB’s Full Text Search overview (with Shiny/R)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Author: Emanuel Calvo&lt;/p&gt;

  &lt;p&gt;Company: Pythian&lt;/p&gt;

  &lt;p&gt;Thanks to Valerie Parham-Thompson @ Pythian and Daniel Prince @ Oracle.&lt;/p&gt;

  &lt;p&gt;Repository available at &lt;a href=&quot;https://github.com/3manuek/fts_article&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the whole article and the Shinyapp application is available &lt;a href=&quot;https://3manuek.shinyapps.io/FTS_Innodb/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;some-initial-thoughts&quot;&gt;Some initial thoughts&lt;/h2&gt;

&lt;p&gt;A couple of days ago one of our customers came up with a question regarding FTS
over InnoDB engine. Although the question is not answered in the current article,
I came up with the conclusion that FTS is sometimes misunderstood.&lt;/p&gt;

&lt;p&gt;The point of this &lt;em&gt;article&lt;/em&gt; is to show dynamically how the search algorithms work,
using non-fictional data (data sources were downloaded from &lt;a href=&quot;www.gutenberg.org&quot;&gt;Gutenberg project&lt;/a&gt;
 ) within an easy interface.&lt;/p&gt;

&lt;p&gt;In order to show the effects off the field sizes over the query expansion algorithm,
you will see two main tables (bookContent and bookContentByLine) both containing
the same books in different approaches: by line and by paragraph. You’ll see the
noise generated by the &lt;code&gt;QUERY EXPANSION&lt;/code&gt; algorithm when phrases are too large.&lt;/p&gt;

&lt;p&gt;The current article has been developed using Shiny/R in order to allow you to see
the effects of the algorithms.&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, in this article we won’t go through the FTS parsers.
Probably that would be material for a future post.&lt;/p&gt;

&lt;h2 id=&quot;why-i-consider-fts-sometimes-misunderstood&quot;&gt;Why I consider FTS sometimes misunderstood?&lt;/h2&gt;

&lt;p&gt;FTS is a technology that can be use for any purpose, not only simple searches.
There is a myth that the FTS only should be placed on clusters for that purpose,
which I agree. However, certain bussines rules require complex searches, and
having such feature can be a win.&lt;/p&gt;

&lt;p&gt;RDBMS aren’t a good place for massive amount of FTS queries, without using any
of the join capabilities that they offer, or the ACID complaints.&lt;/p&gt;

&lt;p&gt;As I said above, FTS is totally acceptable in RDBMS, if you are using at least
one RDBMS critical feature, required by your bussines model.&lt;/p&gt;

&lt;h2 id=&quot;action&quot;&gt;Action!&lt;/h2&gt;

&lt;p&gt;Here is an example of how ranks differ among algorithms and field sizes using the word ‘country’:&lt;/p&gt;

&lt;p&gt;To start showing the effects of the algorithms, the following example searches
the word ‘country’ using &lt;code&gt;query expansion&lt;/code&gt;. This means that we are not looking
only the exact matches, but also the entries that appear the most when the
the exact match has been found.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;SELECT&lt;/code&gt; clause you’ll see both FTS expressions using &lt;code&gt;NATURAL LANGUAGE&lt;/code&gt;
with query expansion and &lt;code&gt;BOOLEAN&lt;/code&gt;modes respectively.&lt;/p&gt;

&lt;p&gt;```sql
set global innodb_ft_aux_table = ‘ftslab/bookContentByLine’;&lt;/p&gt;

&lt;p&gt;SELECT  content, bookid, group_concat(it.POSITION) as pos,
        round(MATCH(content) AGAINST (“country” IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION)) as QERank,
        round(MATCH(content) AGAINST (“country” IN BOOLEAN MODE)) as BoolRank
      FROM bookContentByLine bl join information_schema.INNODB_FT_INDEX_TABLE it
          ON (bl.FTS_DOC_ID = it.DOC_ID)&lt;br /&gt;
      WHERE  MATCH(content) AGAINST (“country” IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION)
          AND it.WORD = ‘country’
     GROUP BY FTS_DOC_ID
     ORDER BY 4 DESC
     LIMIT 10 ;
```&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
+-----------------------------------------------------------------------------+--------+-----+--------+--------+
|content                                                                      | bookid | pos | QERank |BoolRank|
+-----------------------------------------------------------------------------+--------+-----+--------+--------+
|&quot;country in September, migrating into Holland, and leave their mates behind&quot; |  15707 | 1   |    105 |      7 |
|&quot;unsatisfied desire to serve his country, the two prevalent enthusiasms at&quot;  |  15707 | 33  |     98 |      7 |
|&quot;Language, Vol. I. p. 212. In this country, where four or five horses travel&quot;|  15707 | 35  |     93 |      7 |
|&quot;inflicting immense damage upon the country. Whereupon the Florentines&quot;      |   1232 | 36  |     89 |      7 |
|&quot;made for a country of twenty or thirty millionsâ€™ population, can be laid&quot; |  39064 | 12  |     89 |      7 |
|&quot;The spiders of this country manufacture nets of various forms, adapted to&quot;  |  15707 | 21  |     87 |      7 |
|&quot;a velvet-covered arm-chair at my head! This country is too decadent&quot;        |  33415 | 45  |     86 |      7 |
|&quot;country may be ennobled, and under its auspices may be verified that&quot;       |   1232 | 1   |     84 |      7 |
|&quot;name. The writer of this unpublished pamphlet sees his country in a&quot;        |  39064 | 56  |     84 |      7 |
|&quot;In our country, Mr. Pennant informs us, that some quails migrate, and&quot;      |  15707 | 8   |     83 |      7 |
|&quot;all the morning in passing over the adjacent country.&quot; (Voyage to Senegal,&quot; |  15707 | 46  |     82 |      7 |
|&quot;the electoral system of the country. Immediately an outcry burst out&quot;       |  39064 | 29  |     82 |      7 |
|&quot;country, under a most excellent president, wherein all cities had their&quot;    |   1232 | 1   |     81 |      7 |
|&quot;Though in this country horses shew little vestiges of policy, yet in the&quot;   |  15707 | 16  |     81 |      7 |
|&quot;country districts. As Lucca had five gates, he divided his own country&quot;     |   1232 | 1,63|     80 |     14 |
+-----------------------------------------------------------------------------+--------+-----+--------+--------+
15 rows in set (1,16 sec)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The noise generated by the query expansion is expected and described in the official documentation &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/fulltext-query-expansion.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The interesting case is the following row, which has 2 exact occurrences and it is not the highest rank using query
extension. Remember, this is expected.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Text: &quot;country districts. As Lucca had five gates, he divided his own country&quot;
bookid: 1232
pos: 1,63
QERank: 80
BoolRank: 14
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is even worser when using large sentences. In the example bellow you will see the same query, against the table
storing by paragraph. The boolean rank shows some of the entries way above others, however the query extension
locates at the top records that not necessarily has a lot of exact matches.&lt;/p&gt;

&lt;p&gt;```sql
SET GLOBAL innodb_ft_aux_table = ‘ftslab/bookContent’;&lt;/p&gt;

&lt;p&gt;SELECT bookid, FTS_DOC_ID,
                group_concat(it.POSITION) as positions,
                round(MATCH(content) AGAINST (“country” IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION)) as QERank,
                round(MATCH(content) AGAINST (“country” IN BOOLEAN MODE)) as BooleanRank,
                length(content) as len
          FROM bookContent bl join information_schema.INNODB_FT_INDEX_TABLE it ON (bl.FTS_DOC_ID = it.DOC_ID)&lt;br /&gt;
          WHERE  MATCH(content) AGAINST (“country” IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION)
              AND it.WORD = ‘country’
          GROUP BY FTS_DOC_ID
          ORDER BY QERank DESC
          LIMIT 10 ;
```&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
+--------+------------+-----------------+--------+-------------+-------+
| bookid | FTS_DOC_ID | positions       | QERank | BooleanRank | len   |
+--------+------------+-----------------+--------+-------------+-------+
|  16452 |      17637 | 942,2552,9084   |  32494 |          10 | 51790 |
|  16452 |      17827 | 31699           |  30232 |           3 | 51701 |
|  16452 |      17761 | 667,47646       |  29517 |           7 | 50264 |
|  16452 |      17791 | 13566           |  28888 |           3 | 49129 |
|  16452 |      17927 | 23259,7044      |  26731 |           7 | 48983 |
|  16452 |      17839 | 9012,199        |  24933 |           7 | 44451 |
|  16452 |      17815 | 29318           |  24745 |           3 | 44011 |
|  16452 |      17729 | 895,16485,24034 |  23305 |          10 | 42612 |
|  16452 |      17621 | 1765            |  19935 |           3 | 36698 |
|  16452 |      17803 | 3942            |  17552 |           3 | 30586 |
+--------+------------+-----------------+--------+-------------+-------+
10 rows in set (1,88 sec)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The query expansion is useful when you intend to search which entries contain
more words that appear frequently within the search term. Having large text fields
increase the probability to have more words that appear among the search term.
In the case of &lt;code&gt;bookContent&lt;/code&gt; table (by paragraph table), the average field size
is &lt;code&gt;r rs$len&lt;/code&gt; characters.&lt;/p&gt;

&lt;h2 id=&quot;the-innodbftindextable&quot;&gt;The &lt;code&gt;INNODB_FT_INDEX_TABLE&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;There is a way to play with the contents of the FTS indexes. As you may noticed
in the previous examples, I used the &lt;code&gt;set global innodb_ft_aux_table = &#39;ftslab/bookContent&#39;;&lt;/code&gt;
statement, which loads the index content to memory for an easy querying.&lt;/p&gt;

&lt;p&gt;If you use RDS, the option &lt;code&gt;innodb_ft_aux_table&lt;/code&gt; is not available as it is GLOBAL
and require SUPER privileges.&lt;/p&gt;

&lt;p&gt;i.e. You can easily get the most frequent tokens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sql
SELECT WORD,count(*)
           FROM information_schema.INNODB_FT_INDEX_TABLE   
           group by WORD having count(*) &amp;gt; 1000
           order by 2
           limit 10;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
+--------+----------+
| WORD   | count(*) |
+--------+----------+
| should |     1023 |
| yet    |     1027 |
| any    |     1070 |
| like   |     1071 |
| been   |     1073 |
| first  |     1080 |
| nor    |     1087 |
| your   |     1106 |
| thou   |     1130 |
| shall  |     1164 |
+--------+----------+
10 rows in set (5,40 sec)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Probably it isn’t a very useful information as most of this words appears too frequently
and are modal verbs,  adverbs,  pronouns, determiners, etc. It could be the case that you
are not interested on indexing those words. If that’s the case you can add them as &lt;code&gt;stopwords&lt;/code&gt;
in your own stopwords table. Specially if you are more interested in boolean searches, loosing
some part of the language expressions. I built I query for this situation to allow us to build
the stopwords table using the current words that we want to add to the filtering:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
(ftslab) &amp;gt; select group_concat(WORD) FROM (select distinct WORD  
  FROM information_schema.INNODB_FT_INDEX_TABLE               
  group by WORD having count(*) &amp;gt; 1000) d\G
*************************** 1. row ***************************
group_concat(WORD): all,and,any,been,but,can,first,had,has,have,her,him,his,into,
its,like,may,more,nor,not,now,one,only,other,our,said,shall,she,should,some,such,
than,their,them,then,there,these,they,those,thou,thus,thy,time,were,which,would,
yet,you,your
1 row in set (5,28 sec)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s build our filter table using both default and new entries and keeping the
alphabetical order:&lt;/p&gt;

&lt;p&gt;```sql
CREATE TABLE bookContentByLine_stopwords(value VARCHAR(30)) ENGINE = INNODB;&lt;/p&gt;

&lt;p&gt;INSERT INTO bookContentByLine_stopwords
SELECT value FROM (
    SELECT value FROM
    INFORMATION_SCHEMA.INNODB_FT_DEFAULT_STOPWORD
    UNION
    SELECT DISTINCT WORD as value&lt;br /&gt;
      FROM information_schema.INNODB_FT_INDEX_TABLE             &lt;br /&gt;
      GROUP BY WORD having count(*) &amp;gt; 1000
) allEntries
ORDER BY value ASC;&lt;/p&gt;

&lt;p&gt;DROP INDEX ftscontent ON bookContentByLine;
SET GLOBAL innodb_ft_server_stopword_table = ‘ftslab/bookContentByLine_stopwords’;
CREATE FULLTEXT INDEX ftscontent ON bookContentByLine(content);&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Checking the contents of the index is easy as:&lt;/p&gt;

&lt;p&gt;```
(ftslab) &amp;gt; select *
          from information_schema.INNODB_FT_INDEX_TABLE
          WHERE lower(WORD) like ‘%country%’;
+——————+————–+————-+———–+——–+———-+
| WORD             | FIRST_DOC_ID | LAST_DOC_ID | DOC_COUNT | DOC_ID | POSITION |
+——————+————–+————-+———–+——–+———-+
| country          |          149 |         787 |        28 |    733 |      265 |
| country          |          149 |         787 |        28 |    733 |     1342 |
| countrydistricts |          733 |         733 |         1 |    733 |      816 |
| thecountry       |          249 |         733 |         2 |    733 |      750 |
+——————+————–+————-+———–+——–+———-+
4 rows in set (0,08 sec)&lt;/p&gt;

&lt;p&gt;(ftslab) &amp;gt; select *
          from information_schema.INNODB_FT_INDEX_TABLE
          WHERE DOC_ID = 155 AND lower(WORD) like ‘%country%’;
+———+————–+————-+———–+——–+———-+
| WORD    | FIRST_DOC_ID | LAST_DOC_ID | DOC_COUNT | DOC_ID | POSITION |
+———+————–+————-+———–+——–+———-+
| country |          149 |         787 |        28 |    155 |       31 |
| country |          149 |         787 |        28 |    155 |      495 |
| country |          149 |         787 |        28 |    155 |      158 |
| country |          149 |         787 |        28 |    155 |      525 |
+———+————–+————-+———–+——–+———-+
4 rows in set (0,09 sec)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the example shown before the is no intention to compare ranks score as they are based in different algorithms.
The idea there is to show that QUERY EXPANSION can have non desire results in some cases due to its mechanism.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;going-ahead-on-choosing-stop-words&quot;&gt;Going ahead on choosing stop words&lt;/h3&gt;

&lt;p&gt;The full &lt;a href=&quot;https://en.wikipedia.org/wiki/Zipf&#39;s_law&quot;&gt;article&lt;/a&gt; is amazingly interesting. In a brief, it says that
the most frequent word will occur approximately twice as often as the second most frequent word, three times as
often as the third most frequent word, and so on (rank-frequency distribution is an inverse relation).&lt;/p&gt;

&lt;p&gt;The idea here is to measure how much index do we safe cutting those words that are extremely frequent and don’t add
a necessary meaning to the search.&lt;/p&gt;

&lt;h2 id=&quot;considerations-and-recommendations&quot;&gt;Considerations and recommendations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Use QUERY EXPANSION only if you are interested to search relations over exact matches. Remember that the field
size is crucial when using this.&lt;/li&gt;
  &lt;li&gt;FTS is not the best fit for exact string matches in single columns. You don’t want to use FTS for searching emails in
a single column, name and lastname fields , i.e. For those, you’ll probably use other techniques as reverse searches or
exact match operator (=).&lt;/li&gt;
  &lt;li&gt;Keep your FTS indexes short. Do not add ALL the text columns. Parse first from your application the user search and
adapt the query.&lt;/li&gt;
  &lt;li&gt;If you are using BOOLEAN MODE, you can use the rank score to filter rows. MySQL is clever enough to optimize the
FTS functions to avoid double executions. You can do this using something like:
&lt;code&gt;match(content,title) against (&quot;first (&amp;lt;second &amp;gt;third)&quot;) &amp;gt; 1 &lt;/code&gt;
Generally, scores lower than 1 can be ignored when using boolean or natural mode searches.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;OPTIMIZE TABLE&lt;/code&gt; does a rebuild of the table. To avoid this, set &lt;code&gt;innodb_optimize_fulltext_only=1&lt;/code&gt; in order to do an incremental
maintance on the table.&lt;/li&gt;
  &lt;li&gt;Recall that NATURAL LANGUAGE MODE does not take the operands as the BOOLEAN MODE. This affects the ranking score (try __+bad (&lt;feeling&gt;thing)__ i.e.)&lt;/feeling&gt;&lt;/li&gt;
  &lt;li&gt;If you plan to order by rank, it is not necessary to specify the clause &lt;code&gt;ORDER BY&lt;/code&gt; as InnoDB does the order after retrieve the doc ids . Also,the behavior is different from the default as it returns the heaviest at the top (like an &lt;strong&gt;ORDER BY rank DESC&lt;/strong&gt;).&lt;/li&gt;
  &lt;li&gt;If you come from MyISAM’s FTS implementation, recall that the ranking scoring is different.&lt;/li&gt;
  &lt;li&gt;Create the FULLTEXT index after the data is loaded &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/optimizing-innodb-bulk-data-loading.html&quot;&gt;InnoDB bulk load&lt;/a&gt;. When restoring FTS backups, you will probably hit the “ERROR 182 (HY000) at line nn: Invalid InnoDB FTS Doc ID”.&lt;/li&gt;
  &lt;li&gt;Try to avoid using use more than one FTS expression in the where clause. Keep in mind that this affects the order in the results and
it consumes a considerably amount of CPU. InnoDB orders by the latest expression in the WHERE clause. &lt;a href=&quot;https://dev.mysql.com/worklog/task/?id=7123&quot;&gt;WL#7123&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Also, if avoiding the rank information in the projection (SELECT clause) and using other aggregations like &lt;code&gt;count(*)&lt;/code&gt;, will use
the “no ranking” FT_hints. The &lt;code&gt;limit&lt;/code&gt; hint won’t be used if invoked explicitely an &lt;code&gt;ORDER BY&lt;/code&gt; and th &lt;code&gt;MATCH&lt;/code&gt; clause in the projection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```sql
explain  select  *
                      from bookContentByLine
                      where match(content) against (“+home” IN BOOLEAN MODE)
                      ORDER BY FTS_DOC_ID&lt;br /&gt;
                      LIMIT 10\G
  select_type: SIMPLE
        table: bookContentByLine
         type: fulltext
        Extra: Using where; Ft_hints: no_ranking; Using filesort&lt;/p&gt;

&lt;p&gt;explain  select  *
                      from bookContentByLine
                      where match(content) against (“+home” IN BOOLEAN MODE)
                      LIMIT 10\G
        table: bookContentByLine
         type: fulltext
        Extra: Using where; Ft_hints: no_ranking, limit = 10&lt;/p&gt;

&lt;p&gt;explain  select  count(content)
                    from bookContentByLine
                    where match(content) against (“+home” IN BOOLEAN MODE) \G
        table: bookContentByLine
         type: fulltext
        Extra: Using where; Ft_hints: no_ranking&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you plan to use &lt;code&gt;FTS_DOC_ID&lt;/code&gt; column with &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; option,
have in mind that there is a limitation regarding this. You must declare
a single column PRIMARY KEY constraint or as an UNIQUE index. Also, the data
type is stricted as &lt;code&gt;bigint unsigned&lt;/code&gt;. i.e:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sql
CREATE TABLE test ( FTS_DOC_ID bigint unsigned  AUTO_INCREMENT,
                    mainPk bigint, other text,
                    PRIMARY KEY(mainPk),
                    UNIQUE(FTS_DOC_ID)
                    );
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;ftqueryexpansionlimit&quot;&gt;FT_QUERY_EXPANSION_LIMIT&lt;/h3&gt;

&lt;p&gt;This variable controls the number of top matches when using &lt;code&gt;WITH QUERY EXPANSION&lt;/code&gt; (affects only MyISAM).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_ft_query_expansion_limit&quot;&gt;reference&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;bug-80347---invalid-innodb-fts-doc-id&quot;&gt;Bug 80347 - Invalid InnoDB FTS Doc ID&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Submitted https://bugs.mysql.com/bug.php?id=80347&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;```bash
emanuel@3laptop ~/sandboxes/rsandbox_5_7_9 $ ./m dumpTest &amp;lt; full.dump
ERROR 182 (HY000) at line 73: Invalid InnoDB FTS Doc ID&lt;/p&gt;

&lt;p&gt;emanuel@3laptop ~/sandboxes/rsandbox_5_7_9 $ ./m dumpTest &amp;lt; ddl.dump
emanuel@3laptop ~/sandboxes/rsandbox_5_7_9 $ ./m dumpTest &amp;lt; onlyData.dump
emanuel@3laptop ~/sandboxes/rsandbox_5_7_9 $ ./m dumpTest &amp;lt; full.dump
ERROR 182 (HY000) at line 73: Invalid InnoDB FTS Doc ID
```&lt;/p&gt;

&lt;p&gt;mysqldump is not very clever if you use &lt;code&gt;FTS_DOC_ID&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
2016-02-13T22:11:53.125300Z 19 [ERROR] InnoDB: Doc ID 10002 is too big. Its difference with largest used Doc ID 1 cannot exceed or equal to 10000
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It takes dumps without considering the restriction coded in
&lt;code&gt;innobase/row/row0mysql.cc&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Difference between Doc IDs are restricted within
4 bytes integer. See fts_get_encoded_len()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The fix to this is backuping the table by chunks of 10000 documents.&lt;/p&gt;

&lt;h3 id=&quot;fine-tuning&quot;&gt;Fine tuning&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/fulltext-fine-tuning.html&quot;&gt;Fine tuning&lt;/a&gt;
&lt;a href=&quot;https://blogs.oracle.com/mysqlinnodb/entry/innodb_full_text_search_performance&quot;&gt;Performance&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;features-introduces&quot;&gt;Features introduces&lt;/h3&gt;

&lt;h3 id=&quot;maintenance&quot;&gt;Maintenance&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_optimize_fulltext_only&quot;&gt;innodb_optimize_fulltext_only&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;parsers-internals&quot;&gt;Parsers internals&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/writing-full-text-plugins.html&quot;&gt;Writting FTS parser plugins&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;version&quot;&gt;Version&lt;/h2&gt;

&lt;p&gt;This R Markdown document is made interactive using Shiny. Unlike the more traditional
workflow of creating static reports, you can now create documents that allow your
readers to change the assumptions underlying your analysis and see the results immediately.&lt;br /&gt;
To learn more, see &lt;a href=&quot;http://rmarkdown.rstudio.com/authoring_shiny.html&quot;&gt;Interactive Documents&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Apr 2016 00:00:00 -0300</pubDate>
        <link>http://www.3manuek.com/fts-innodb</link>
        <guid isPermaLink="true">http://www.3manuek.com/fts-innodb</guid>
        
        
        <category>blog</category>
        
        <category>MySQL</category>
        
        <category>FTS</category>
        
        <category>InnoDB</category>
        
      </item>
    
      <item>
        <title>Multi source data injection to Postgres RDS with encryption and FTS support</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Note 1:
All the of this presentation is published in this &lt;a href=&quot;&quot;&gt;repository&lt;/a&gt;. You will find a lot of folders and information, probably part of a blog series.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note 2:
All the work on this article is a &lt;strong&gt;POC&lt;/strong&gt; (Proof of concept).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note 3:
This is something that is related for &lt;a href=&quot;https://en.wikipedia.org/wiki/Health_Insurance_Portability_and_Accountability_Act&quot;&gt;HIPAA&lt;/a&gt; compliant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;kmshttpawsamazoncomkmsrdshttpsawsamazoncomrdspostgresql&quot;&gt;&lt;a href=&quot;http://aws.amazon.com/kms/&quot;&gt;KMS&lt;/a&gt;/&lt;a href=&quot;https://aws.amazon.com/rds/postgresql/&quot;&gt;RDS&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The POC on this article was developed before the releasing of the Key Management service
for RDS.&lt;/p&gt;

&lt;p&gt;I totally discourage to use the current approach for encrypting data. &lt;em&gt;Use REST.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I’ve been dealing with an issue that came into my desktop from people of the
community, regarding RDS and HIPAA rules. There was a confusing scenario whether
PostgreSQL was using FTS and encryption on RDS. There are a lot of details regarding
the architecture, however I think it won’t be necessary to dig into
very deeply to understand the basics of the present article moto.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Health_Insurance_Portability_and_Accountability_Act&quot;&gt;HIPAA&lt;/a&gt;
rules are complex and if you need to deal with them, you’ll probably need to go
through a careful read.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tl;dr&lt;/code&gt;? they tell us to store data encrypted on servers that are not in the premises.
And that’s the case of RDS. However, all the communications are encrypted using
SSL protocol, but is not enough to compliant with HIPAA rules.&lt;/p&gt;

&lt;p&gt;CPU resources in RDS are expensive and not stable sometimes, which makes encryption and
FTS features not very well suited for this kind of service. I not saying that you
can’t implement them, just keep in mind that a standard CPU against vCPU could
have a lot difference. If you want to benchmark your local CPU against RDS vCPU,
you can run the following query inside &lt;code&gt;psql&lt;/code&gt; on both instances:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
\o /dev/null
\timing
SELECT convert_from(
          pgp_sym_decrypt_bytea(
              pgp_sym_encrypt_bytea(&#39;Text to be encrypted using pgp_sym_decrypt_bytea&#39; || gen_random_uuid()::text::bytea,&#39;key&#39;, &#39;compress-algo=2&#39;),
          &#39;key&#39;),
        &#39;SQL-ASCII&#39;)
FROM generate_series(1,10000);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of things and functions you can combine from the &lt;code&gt;pgcrypto&lt;/code&gt; package
(you will see that the repository contemplates all of them).
I will try to post another blog post regarding this kind of benchmarks. In the
meantime, this query should be enough to have a rough idea of the performance difference
between RDS instance vCPU and your server CPUs.&lt;/p&gt;

&lt;h2 id=&quot;architecture-basics&quot;&gt;Architecture basics&lt;/h2&gt;

&lt;p&gt;For this POC we are going to store FTS and GPG keys locally, in a simple PostgreSQL
instance and, using a trigger, encrypt and upload transparently to RDS using the
standard FDW (Foreign Data Wrappers).&lt;/p&gt;

&lt;p&gt;Have in mind that RDS communication is already encrypted via SSL when data flows
between server/client. It’s important to clarify this, to avoid confusions between
communication encryption and storing data encrypted.&lt;/p&gt;

&lt;p&gt;The simple trigger will split the unencrypted data between a local table storing
in a &lt;code&gt;tsvector&lt;/code&gt; column (jsonb in the TODO), it will encrypt and push the encrypted
data into RDS using FDW (the standard postgres_fdw package).&lt;/p&gt;

&lt;p&gt;A simple flight view of the idea can be observed in the image bellow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3manuek/RDS_HIPAA_FTS/master/FDW_TO_RDS/images/image1.png&quot; alt=&quot;alt text&quot; title=&quot;Image 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Source: https://www.lucidchart.com/documents/edit/c22ce7a1-c09d-4ca8-922d-dcb123d577a5?driveId=0AHk8my7IafcZUk9PVA#&lt;/p&gt;

&lt;h2 id=&quot;rds-structure-and-mirrored-local-structure-with-fdw&quot;&gt;RDS structure and mirrored local structure with FDW&lt;/h2&gt;

&lt;p&gt;RDS instance schema structure contains a parent table , a partitioning trigger  and
its trigger:&lt;/p&gt;

&lt;p&gt;```
CREATE SCHEMA enc_schema;&lt;/p&gt;

&lt;p&gt;SET search_path TO enc_schema;&lt;/p&gt;

&lt;p&gt;– Encrpting locally, that’s why we don’t need to reference the key here.
create table enc_schema.__person__pgp
     (
      id bigint,
      source varchar(8),
      partial_ssn varchar(4), – Non encrypted field for other fast search purposes
      ssn bytea,
      keyid varchar(16),
      fname bytea,
      lname bytea,
      description bytea,
      auth_drugs bytea, 		– This is an encrypted text vector
      patology bytea,
      PRIMARY KEY(id,source)
);&lt;/p&gt;

&lt;p&gt;CREATE INDEX ON enc_schema.__person__pgp (partial_ssn);&lt;/p&gt;

&lt;p&gt;CREATE OR REPLACE FUNCTION basic_ins_trig() RETURNS trigger LANGUAGE plpgsql AS $basic_ins_trig$
DECLARE
  compTable text :=  TG_RELID::regclass::text ;
  childTable text := compTable || ‘_’ || NEW.source ;
  statement text :=  ‘INSERT INTO ‘ || childTable || ‘ SELECT (‘ || QUOTE_LITERAL(NEW) || ‘::’  || compTable ||  ‘).*’ ;
  createStmt text := ‘CREATE TABLE ‘ || childTable  ||
    ‘(CHECK (source =’ || quote_literal(NEW.source) || ‘)) INHERITS (‘ || compTable || ‘)’;
  indexAdd1 text := ‘CREATE INDEX ON ‘ || childTable || ‘(source,id)’ ;
  indexAdd2 text := ‘CREATE INDEX ON ‘ || childTable || ‘(source,ssn)’ ;
BEGIN
  BEGIN
    EXECUTE statement;
  EXCEPTION
    WHEN undefined_table THEN
      EXECUTE createStmt;
      EXECUTE indexAdd1;
      EXECUTE indexAdd2;
      EXECUTE statement;
  END;
  RETURN NULL;&lt;/p&gt;

&lt;p&gt;END;&lt;/p&gt;

&lt;p&gt;$basic_ins_trig$;&lt;/p&gt;

&lt;p&gt;CREATE TRIGGER part_person_pgp BEFORE INSERT ON __person__pgp
FOR EACH ROW EXECUTE PROCEDURE basic_ins_trig() ;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;We are not going to use the &lt;code&gt;partial SSN&lt;/code&gt; column in the examples, but I found it very helpful to
do RDS searches over encrypted data without fall into the need of decrypting in-the-fly the SSN.
The last SSN’s 4-digits do not provide useful information if stolen.&lt;/p&gt;

&lt;p&gt;Also, the magic of the multi-source data injection comes from the compound key using a
bigint and a source tag.&lt;/p&gt;

&lt;p&gt;Basically, you can think on the local nodes as proxies. You can insert data on every node,
but the data will point to the RDS instance.&lt;/p&gt;

&lt;p&gt;If you are planning to manage large amounts of data, you can partition the table on RDS,
allowing a better organization for data management.&lt;/p&gt;

&lt;p&gt;You will see no indexes over encrypted data&lt;/p&gt;

&lt;p&gt;Local nodes structure:&lt;/p&gt;

&lt;p&gt;```
CREATE DATABASE fts_proxy;  –  connect using \c fts_proxy on psql&lt;/p&gt;

&lt;p&gt;– The sauce
CREATE EXTENSION postgres_fdw;
CREATE EXTENSION pgcrypto;&lt;/p&gt;

&lt;p&gt;CREATE SERVER RDS_server
        FOREIGN DATA WRAPPER postgres_fdw
        OPTIONS (host ‘dbtest1.chuxsnuhtvgl.us-east-1.rds.amazonaws.com’, port ‘5432’, dbname ‘dbtest’);&lt;/p&gt;

&lt;p&gt;CREATE USER MAPPING FOR postgres
        SERVER RDS_server
        OPTIONS (user ‘dbtestuser’, password ‘&lt;shadowed&gt;&#39;);&lt;/shadowed&gt;&lt;/p&gt;

&lt;p&gt;CREATE FOREIGN TABLE __person__pgp_RDS
(
       id bigint,
       source varchar(8),
       partial_ssn varchar(4), – Non encrypted field for other fast search purposes
       ssn bytea,
       keyid varchar(16),
       fname bytea,
       lname bytea,
       description bytea,
       auth_drugs bytea, – This is an encrypted text vector
       patology bytea
)
SERVER RDS_server
OPTIONS (schema_name ‘enc_schema’, table_name ‘__person__pgp’);
```&lt;/p&gt;

&lt;p&gt;Same table. Everytime we want to deal with the RDS table, we are going to do so using the &lt;code&gt;__person__pgp_RDS&lt;/code&gt; table, which is just a mapping table. We can query this table as any other usual table.&lt;/p&gt;

&lt;p&gt;For testing purposes, I also created a table with the same structure as the above with
&lt;code&gt;__person_rds_RDS_URE&lt;/code&gt; table name and added the &lt;code&gt;use_remote_estimate &#39;true&#39;&lt;/code&gt; option.
When enabled, postgres_fdw obtains the row count and estimates from the remote server.&lt;/p&gt;

&lt;h2 id=&quot;inserting-keys-locally&quot;&gt;Inserting keys locally&lt;/h2&gt;

&lt;p&gt;Just to avoid an extended article, I will skip the GPG key creation commands here. Please follow the instructions on the link at the referece section about keys.&lt;/p&gt;

&lt;p&gt;We can insert they keys in several ways, but I found very convenient to use &lt;code&gt;psql&lt;/code&gt;
features to do so. Once the keys are in place you can use &lt;code&gt;\lo_import&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
postgres=# \lo_import /var/lib/postgresql/9.4/main/private.key
lo_import 33583
postgres=# \lo_import /var/lib/postgresql/9.4/main/public.key
lo_import 33584
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next steps are very straightforward. In a real scenario, you won’t probably
want to upload private keys into the table, just for practical purposes of this
article I’m going to do so (only for decrypt data in the SELECT query).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;pgp_key_id&lt;/code&gt; will return the same key no matter if you use private or public key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;```
CREATE TABLE keys (
   keyid varchar(16) PRIMARY KEY,
   pub bytea,
   priv bytea
);&lt;/p&gt;

&lt;p&gt;INSERT INTO keys VALUES ( pgp_key_id(lo_get(33583)) ,lo_get(33584), lo_get(33583));
```&lt;/p&gt;

&lt;h2 id=&quot;splitting-data-to-fts-encrypt-and-push-into-rds&quot;&gt;Splitting data to FTS, encrypt and push into RDS&lt;/h2&gt;

&lt;p&gt;Now, here is when the tricky part starts. We are going to achieve some functionalities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We are going to simulate &lt;em&gt;routing&lt;/em&gt; using inheritance on the FTS records. That will allow us to split data as we want and, replicate using Logical Decoding feature between the nodes. I won’t include this on the current article just to avoid it to be extense.&lt;/li&gt;
  &lt;li&gt;We are going to encrypt using the key that we select on the insert query. If you want a key &lt;em&gt;per table basis&lt;/em&gt;, you will find easier to hardcode the key id on the &lt;code&gt;_func_get_FTS_encrypt_and_push_to_RDS&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Once the records are encrypted, the function will insert those records to the foreign table (RDS).&lt;/li&gt;
  &lt;li&gt;When querying the FTS table, we will be able to determine the source (something like the &lt;code&gt;routing&lt;/code&gt; technique, you will find this familiar if you played with ElasticSearch). That allow us to make the FTS search transparent to the application, pointing always to the parent table. :dogewow:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Isn’t Postgres cool? :o&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;fts-table-structures&quot;&gt;FTS table structures&lt;/h3&gt;

&lt;p&gt;```
– Parent table
CREATE TABLE local_search (
  id bigint PRIMARY KEY,
  _FTS tsvector
);
CREATE INDEX fts_index ON local_search USING GIST(_FTS);&lt;/p&gt;

&lt;p&gt;– Child table, suffix local_search_&lt;source /&gt;&lt;/p&gt;

&lt;p&gt;CREATE TABLE local_search_host1 () INHERITS (local_search);
CREATE INDEX fts_index_host1 ON local_search_host1 USING GIST(_FTS);
```
Doing this, you avoid to have a column with a constant value in the table, consuming unnecessary space. You can have with this method, different names and tables accross the cluster, but always using the same query against &lt;code&gt;local_search&lt;/code&gt;. You can map/reduce the data if you want to across the nodes, with the very same query.&lt;/p&gt;

&lt;p&gt;Is not necessary to only have 1 source or route per node. The only requirement for this is to have different routes per node (combining source and route could increase complexity, however is possible).&lt;/p&gt;

&lt;h2 id=&quot;main-code&quot;&gt;Main code&lt;/h2&gt;

&lt;p&gt;```
CREATE SEQUENCE global_seq INCREMENT BY 1 MINVALUE 1 NO MAXVALUE;&lt;/p&gt;

&lt;p&gt;CREATE TABLE __person__pgp_map
     (
      keyid varchar(16),
      source varchar(8),
      ssn bigint,
      fname text,
      lname text,
      description text,
      auth_drugs text[], – This is an encrypted text vector
      patology text
    );&lt;/p&gt;

&lt;p&gt;CREATE OR REPLACE FUNCTION _func_get_FTS_encrypt_and_push_to_RDS() RETURNS “trigger” AS $$
DECLARE
        secret bytea;
        RDS_MAP __person__pgp_RDS%ROWTYPE;
        FTS_MAP local_search%ROWTYPE;
BEGIN&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT pub INTO secret FROM keys WHERE keyid = NEW.keyid;

RDS_MAP.source := NEW.source;
RDS_MAP.fname := pgp_pub_encrypt(NEW.fname, secret);
RDS_MAP.lname := pgp_pub_encrypt(NEW.lname, secret);
RDS_MAP.auth_drugs := pgp_pub_encrypt(NEW.auth_drugs::text, secret);
RDS_MAP.description := pgp_pub_encrypt(NEW.description, secret);
RDS_MAP.patology := pgp_pub_encrypt(NEW.patology, secret);
RDS_MAP.ssn := pgp_pub_encrypt(NEW.ssn::text, secret);
RDS_MAP.partial_ssn := right( (NEW.ssn)::text,4);
RDS_MAP.id := nextval(&#39;global_seq&#39;::regclass);

RDS_MAP.keyid := NEW.keyid;

FTS_MAP.id   := RDS_MAP.id;
FTS_MAP._FTS := (setweight(to_tsvector(NEW.fname) , &#39;B&#39; ) ||
               setweight(to_tsvector(NEW.lname), &#39;A&#39;) ||
               setweight(to_tsvector(NEW.description), &#39;C&#39;) ||
               setweight(to_tsvector(NEW.auth_drugs::text), &#39;C&#39;) ||
               setweight(to_tsvector(NEW.patology), &#39;D&#39;)
                ) ;

-- Both tables contain same id,source
INSERT INTO __person__pgp_RDS SELECT (RDS_MAP.*);
EXECUTE &#39;INSERT INTO local_search_&#39; || NEW.source || &#39; SELECT (&#39; ||  quote_literal(FTS_MAP) || &#39;::local_search).* &#39;;    RETURN NULL; END; $$ LANGUAGE plpgsql;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CREATE TRIGGER trigger_befInsRow_name_FTS
BEFORE INSERT ON __person__pgp_map
FOR EACH ROW
EXECUTE PROCEDURE _func_get_FTS_encrypt_and_push_to_RDS();
```&lt;/p&gt;

&lt;p&gt;This functions does everything. It inserts the data on RDS and split the data on the corresponding FTS child table. For performance purposes, I didn’t want to catch exceptions at insert time (if the child table does not exists, i.e.), but you can also add this feature with an exception block as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   BEGIN
    EXECUTE &#39;INSERT INTO local_search_&#39; || NEW.source || &#39; SELECT (&#39; ||  quote_literal(FTS_MAP) || &#39;::local_search).* &#39;;
   EXCEPTION WHEN undefined_table THEN
     EXECUTE &#39;CREATE TABLE local_search_&#39; || NEW.source || &#39;() INHERITS local_search&#39;;
   END;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The same can be done over the foreign table. More info in “Class HV — Foreign Data Wrapper Error (SQL/MED)” (HV00R -&lt;code&gt;fdw_table_not_found&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Check “Appendix A. PostgreSQL Error Codes” on the official manual for references about error codes.&lt;/p&gt;

&lt;h3 id=&quot;inserting-data&quot;&gt;Inserting data&lt;/h3&gt;

&lt;p&gt;At insertion time, we are going to push data through a mapping table. The reason for this is that all the encrypted data is stored in &lt;code&gt;bytea&lt;/code&gt; datatype, and we want to have clear queries instead.&lt;/p&gt;

&lt;p&gt;A random data query will look as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
INSERT INTO __person__pgp_map
  SELECT
      &#39;host1&#39;,  -- source: host1
                -- You can do this better by grabbing this data from a persistent
                -- location
      &#39;76CDA76B5C1EA9AB&#39;,
       round(random()*1000000000),
      (&#39;{Romulo,Ricardo,Romina,Fabricio,Francisca,Noa,Laura,Priscila,Tiziana,Ana,Horacio,Tim,Mario}&#39;::text[])[round(random()*12+1)],
      (&#39;{Perez,Ortigoza,Tucci,Smith,Fernandez,Samuel,Veloso,Guevara,Calvo,Cantina,Casas,Korn,Rodriguez,Ike,Baldo,Vespi}&#39;::text[])[round(random()*15+1)],
      (&#39;{some,random,text,goes,here}&#39;::text[])[round(random()*5+1)] ,
      get_drugs_random(round(random()*10)::int),
      (&#39;{Anotia,Appendicitis,Apraxia,Argyria,Arthritis,Asthma,Astigmatism,Atherosclerosis,Athetosis,Atrophy,Abscess,Influenza,Melanoma}&#39;::text[])[round(random()*12+1)]
      FROM generate_series(1,50) ;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Did you see the inner comment? Well, probably you want to split by &lt;code&gt;customer&lt;/code&gt; or any other alias. I’m using this ugly harcoded text just to avoid a long article.&lt;/p&gt;

&lt;p&gt;Also, if you want to avoid harcoding as much as posible, you can consider to use a function that returns the host name or routing tag.&lt;/p&gt;

&lt;h3 id=&quot;querying-the-data&quot;&gt;Querying the data&lt;/h3&gt;

&lt;p&gt;We are almost done! Now we can do  some queries. Here are some examples:&lt;/p&gt;

&lt;p&gt;Limiting the matches:&lt;/p&gt;

&lt;p&gt;```
# SELECT convert_from(pgp_pub_decrypt(ssn::text::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name)
# FROM __person__pgp_rds as rds JOIN
#       keys ks USING (keyid)
# WHERE rds.id IN (
#                select id
#                from local_search
#                where to_tsquery(‘Asthma | Athetosis’) @@ _fts LIMIT 5)
#   AND rds.source = ‘host1’;&lt;/p&gt;

&lt;p&gt;source | convert_from
——–+————–
 host1  | 563588056
(1 row)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;All the matches and double check from were the data came from:&lt;/p&gt;

&lt;p&gt;```
# SELECT ls.tableoid::regclass, rds.source,
#        convert_from(pgp_pub_decrypt(ssn::text::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name)
# FROM local_search ls JOIN
#     __person__pgp_rds as rds USING (id),
#     keys ks
# WHERE to_tsquery(‘Asthma | Athetosis’) @@ ls._fts;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; tableoid      | source | convert_from -------------------+--------+-------------- local_search_host1 | host1  | 563588056 (1 row) ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, we can’t finish the article without showing how to use the ranking (did you see those setweight
functions used in the function? You got it!):&lt;/p&gt;

&lt;p&gt;```
#  SELECT rds.id,
#  convert_from(pgp_pub_decrypt(fname::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name),
#  convert_from(pgp_pub_decrypt(lname::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name),
#  ts_rank( ls._FTS, query ) as rank
#    FROM local_search ls JOIN
#         __person__pgp_rds as rds ON (rds.id = ls.id AND rds.source = ‘host1’) JOIN
#         keys ks USING (keyid),
#         to_tsquery(‘Mario | Casas | (Casas:&lt;em&gt;A &amp;amp; Mario:&lt;/em&gt;B) ‘) query
#    WHERE
#        ls._FTS  @@ query
#    ORDER BY rank DESC;&lt;/p&gt;

&lt;p&gt;id | convert_from | convert_from |   rank &lt;br /&gt;
—-+————–+————–+———-
 43 | Mario        | Casas        | 0.425549
 61 | Ana          | Casas        | 0.303964
 66 | Horacio      | Casas        | 0.303964
(3 rows)
```&lt;/p&gt;

&lt;p&gt;Remember, think that this query is doing FTS, decryption and ranking in just one query, over a local and
a remote server. You can’t say that PostgreSQL isn’t hipster enough!&lt;/p&gt;

&lt;p&gt;I can’t continue the article without showing the query plan executed by the local host (using buffers,
  analyze and verbose options).&lt;/p&gt;

&lt;p&gt;```
EXPLAIN (buffers,verbose,analyze) SELECT rds.id,
 convert_from(pgp_pub_decrypt(fname::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name),
 convert_from(pgp_pub_decrypt(lname::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name),
 ts_rank( ls._FTS, query ) as rank
   FROM local_search ls JOIN
        __person__pgp_rds as rds ON (rds.id = ls.id AND rds.source = ‘host1’) JOIN
        keys ks USING (keyid),
        to_tsquery(‘Mario | Casas | (Casas:&lt;em&gt;A &amp;amp; Mario:&lt;/em&gt;B) ‘) query
   WHERE
       ls._FTS  @@ query
   ORDER BY rank DESC;&lt;/p&gt;

&lt;p&gt;….
               -&amp;gt;  Materialize  (cost=100.00..117.09 rows=3 width=122) (actual time=62.946..62.971 rows=50 loops=9)
                     Output: rds.id, rds.fname, rds.lname, rds.keyid
                     -&amp;gt;  Foreign Scan on public.__person__pgp_rds rds  (cost=100.00..117.07 rows=3 width=122) (actual time=566.495..566.520 rows=50 loops=1)
                           Output: rds.id, rds.fname, rds.lname, rds.keyid
                           Remote SQL: SELECT id, keyid, fname, lname FROM enc_schema.__person__pgp WHERE ((source = ‘host1’::text))
…
 Planning time: 4.931 ms
 Execution time: 2115.919 ms
(45 rows)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;From the above &lt;em&gt;Query Plan&lt;/em&gt; extract, we can see that the partitioning at RDS is transparent for the query.
The execution node in charge of extracting data from the RDS is the &lt;em&gt;Foreign Scan&lt;/em&gt;, which also
provides the query executed remotely.&lt;/p&gt;

&lt;p&gt;Wait a minute. Looks like the remote SQL is somehow dangerous to execute. It is not using the
&lt;em&gt;id&lt;/em&gt;! There is a reason for that, and its related on how postgres gather the foreign table statistics.
If I use the &lt;em&gt;remote estimations&lt;/em&gt; we can see how the remote SQL changes in the Query Plan:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
 EXPLAIN (ANALYZE, VERBOSE, BUFFERS) SELECT rds.id,
      convert_from(pgp_pub_decrypt(fname::bytea, ks.priv,&#39;&#39;::text)::bytea,&#39;SQL_ASCII&#39;::name),
      convert_from(pgp_pub_decrypt(lname::bytea, ks.priv,&#39;&#39;::text)::bytea,&#39;SQL_ASCII&#39;::name),
      ts_rank( ls._FTS, query ) as rank
        FROM local_search ls,  __person__pgp_rds_URE  rds  JOIN
             keys ks USING (keyid),
             to_tsquery(&#39;Mario | Casas | (Casas:*A &amp;amp; Mario:*B) &#39;) query
        WHERE                                                      
            rds.id = ls.id
              AND rds.source = &#39;host1&#39;
            AND
            ls._FTS  @@ query
        ORDER BY rank DESC;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Query Plan (Foreign Scan execution node):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
...
-&amp;gt;  Foreign Scan on public.__person__pgp_rds_ure rds  (cost=100.01..108.21 rows=2 width=1018) (actual time=250.334..250.336 rows=1 loops=31)
      Output: rds.id, rds.source, rds.partial_ssn, rds.ssn, rds.keyid, rds.fname, rds.lname, rds.description, rds.auth_drugs, rds.patology
      Remote SQL: SELECT id, keyid, fname, lname FROM enc_schema.__person__pgp WHERE ((source = &#39;host1&#39;::text)) AND (($1::bigint = id))
...
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Foreign tables also need the local statistics to be updated. In the next examples
there are 3 queries: using the &lt;code&gt;use_remote_estimate&lt;/code&gt;, without previous ANALYZE and
without &lt;code&gt;use_remote_estimate&lt;/code&gt; and a query using the local estimations (&lt;code&gt;__person_pgp_rds&lt;/code&gt;)
after issuing ANALYZE and without &lt;em&gt;URE&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;```
fts_proxy=# \o /dev/null
fts_proxy=#  SELECT rds.id,
      convert_from(pgp_pub_decrypt(fname::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name),
      convert_from(pgp_pub_decrypt(lname::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name),
      ts_rank( ls._FTS, query ) as rank
        FROM local_search ls,  __person__pgp_rds_URE  rds  JOIN
             keys ks USING (keyid),
             to_tsquery(‘Mario | Casas | (Casas:&lt;em&gt;A &amp;amp; Mario:&lt;/em&gt;B) ‘) query
        WHERE
            rds.id = ls.id
              AND rds.source = ‘host1’
            AND
            ls._FTS  @@ query
        ORDER BY rank DESC;
Time: 12299,691 ms&lt;/p&gt;

&lt;p&gt;fts_proxy=#  SELECT rds.id,
      convert_from(pgp_pub_decrypt(fname::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name),
      convert_from(pgp_pub_decrypt(lname::bytea, ks.priv,’’::text)::bytea,’SQL_ASCII’::name),
      ts_rank( ls._FTS, query ) as rank
        FROM local_search ls,  __person__pgp_rds  rds  JOIN
             keys ks USING (keyid),
             to_tsquery(‘Mario | Casas | (Casas:&lt;em&gt;A &amp;amp; Mario:&lt;/em&gt;B) ‘) query
        WHERE
            rds.id = ls.id
              AND rds.source = ‘host1’
            AND
            ls._FTS  @@ query
        ORDER BY rank DESC;
Time: 20249,719 ms&lt;/p&gt;

&lt;p&gt;– AFTER ANALYZE on the FOREIGN TABLE __person_pgp_rds (in the local server)&lt;/p&gt;

&lt;p&gt;Time: 1656,912 ms&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;After analyzing both foreign tables , the execution time difference was calculated
at 11% in favor of using local estimations.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE about UPDATES: it is necessary to code the UPDATE trigger also, in order to
decrypt , modify and re-encrypt the data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;jsonjsonb-datatype-is-here-to-help&quot;&gt;Json/jsonb datatype is here to help&lt;/h3&gt;

&lt;p&gt;You can collapse all the data and use &lt;code&gt;json&lt;/code&gt; datatype on the mapping and foreign table, allowing you to avoid the pain of pointing and decrypting data per column basis.&lt;/p&gt;

&lt;p&gt;Put all the encrypted columns in a &lt;code&gt;bytea&lt;/code&gt; column on RDS. The mapping table will look as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
CREATE TABLE __person__pgp_map
     (
      keyid varchar(16),
      source varchar(8),
      ssn bigint,
      data jsonb
    );
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At insert time, just use a json column instead per column basis. Keep in mind that you will need to deal within the json contents.
I found using this easier for insert, but the FTS needs some clean up to avoid insert column names in the &lt;code&gt;_fts&lt;/code&gt; field at &lt;code&gt;local_search&lt;/code&gt; tables.
Also, for updates, the jsonb datatype will need extra work when extracting attributes.&lt;/p&gt;

&lt;h2 id=&quot;additional-functions-used-here&quot;&gt;Additional functions used here&lt;/h2&gt;

&lt;p&gt;In the insert statement above, you will see a user defined function that gets a random length vector of drugs. It is implemented using the following code:&lt;/p&gt;

&lt;p&gt;```
CREATE TABLE drugsList ( id serial PRIMARY KEY, drugName text);&lt;/p&gt;

&lt;p&gt;INSERT INTO drugsList(drugName) SELECT p.nameD FROM regexp_split_to_table(
‘Acetaminophen
Adderall
Alprazolam
Amitriptyline
Amlodipine
Amoxicillin
Ativan
Atorvastatin
Azithromycin
Ciprofloxacin
Citalopram
Clindamycin
Clonazepam
Codeine
Cyclobenzaprine
Cymbalta
Doxycycline
Gabapentin
Hydrochlorothiazide
Ibuprofen
Lexapro
Lisinopril
Loratadine
Lorazepam
Losartan
Lyrica
Meloxicam
Metformin
Metoprolol
Naproxen
Omeprazole
Oxycodone
Pantoprazole
Prednisone
Tramadol
Trazodone
Viagra
Wellbutrin
Xanax
Zoloft’, ‘\n’) p(nameD);&lt;/p&gt;

&lt;p&gt;CREATE OR REPLACE FUNCTION get_drugs_random(int)
       RETURNS text[] AS
      $BODY$
      WITH rdrugs(dname) AS (
        SELECT drugName FROM drugsList p ORDER BY random() LIMIT $1
      )
      SELECT array_agg(dname) FROM rdrugs ;
$BODY$
LANGUAGE ‘sql’ VOLATILE;
```&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;A very awesome tutorial about FTS for PostgreSQL can be found &lt;a href=&quot;http://www.sai.msu.su/~megera/postgres/fts/doc/appendixes.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.drugs.com/drug_information.html&quot;&gt;Source for drugs list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://simple.wikipedia.org/wiki/List_of_diseases&quot;&gt;Source for diseases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnupg.org/gph/en/manual/c14.html&quot;&gt;Getting started with GPG keys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;AWS command line tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discussion in the community mailing lis &lt;a href=&quot;http://postgresql.nabble.com/Fast-Search-on-Encrypted-Feild-td1863960.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Mar 2016 00:00:00 -0300</pubDate>
        <link>http://www.3manuek.com/rds-hipaa-fts</link>
        <guid isPermaLink="true">http://www.3manuek.com/rds-hipaa-fts</guid>
        
        
        <category>blog</category>
        
        <category>PostgreSQL</category>
        
        <category>RDS</category>
        
      </item>
    
  </channel>
</rss>
